{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting tweepy\n",
      "  Downloading tweepy-4.4.0-py2.py3-none-any.whl (65 kB)\n",
      "\u001b[K     |‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 65 kB 6.5 MB/s  eta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied: requests<3,>=2.11.1 in /Users/safezone/opt/anaconda3/lib/python3.8/site-packages (from tweepy) (2.24.0)\n",
      "Requirement already satisfied: requests-oauthlib<2,>=1.0.0 in /Users/safezone/opt/anaconda3/lib/python3.8/site-packages (from tweepy) (1.3.0)\n",
      "Requirement already satisfied: chardet<4,>=3.0.2 in /Users/safezone/opt/anaconda3/lib/python3.8/site-packages (from requests<3,>=2.11.1->tweepy) (3.0.4)\n",
      "Requirement already satisfied: idna<3,>=2.5 in /Users/safezone/opt/anaconda3/lib/python3.8/site-packages (from requests<3,>=2.11.1->tweepy) (2.10)\n",
      "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /Users/safezone/opt/anaconda3/lib/python3.8/site-packages (from requests<3,>=2.11.1->tweepy) (1.25.9)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /Users/safezone/opt/anaconda3/lib/python3.8/site-packages (from requests<3,>=2.11.1->tweepy) (2021.10.8)\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in /Users/safezone/opt/anaconda3/lib/python3.8/site-packages (from requests-oauthlib<2,>=1.0.0->tweepy) (3.1.0)\n",
      "Installing collected packages: tweepy\n",
      "Successfully installed tweepy-4.4.0\n"
     ]
    }
   ],
   "source": [
    "!pip install tweepy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import tweepy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "_id=[tweet.id for tweet in public_tweets]\n",
    "tweets=[tweet.text for tweet in public_tweets]\n",
    "retweeted_or_not=[tweet.retweeted for tweet in public_tweets]\n",
    "created_at=[tweet.created_at for tweet in public_tweets]\n",
    "TweetsData=pd.DataFrame({'Id':_id,'Created At':created_at,'Tweets':tweets,'Retweeted or Not':retweeted_or_not})\n",
    "TweetsData"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>Created At</th>\n",
       "      <th>Tweets</th>\n",
       "      <th>Retweet Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1470861456321224718</td>\n",
       "      <td>2021-12-14 21:01:13+00:00</td>\n",
       "      <td>Interactive Data Visualization with plotly in ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1470861325341442059</td>\n",
       "      <td>2021-12-14 21:00:41+00:00</td>\n",
       "      <td>#PoT | #FBO | Check this out! We have just dow...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1470861246232731655</td>\n",
       "      <td>2021-12-14 21:00:23+00:00</td>\n",
       "      <td>RT @Ronald_vanLoon: Enterprise #DigitalTransfo...</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1470861211227070474</td>\n",
       "      <td>2021-12-14 21:00:14+00:00</td>\n",
       "      <td>Access world-class instructors and mentors thr...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1470860530961240071</td>\n",
       "      <td>2021-12-14 20:57:32+00:00</td>\n",
       "      <td>Learn all about #Cloud #Data #DataScience at '...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1470860034447978496</td>\n",
       "      <td>2021-12-14 20:55:34+00:00</td>\n",
       "      <td>RT @GinniRometty: I'm proud to be co-chair of ...</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1470859927539392514</td>\n",
       "      <td>2021-12-14 20:55:08+00:00</td>\n",
       "      <td>if you haven't let them know today üíñ https://t...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1470858398845607949</td>\n",
       "      <td>2021-12-14 20:49:04+00:00</td>\n",
       "      <td>Scientists Use A New #DeepLearning Method To A...</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1470858155039105024</td>\n",
       "      <td>2021-12-14 20:48:06+00:00</td>\n",
       "      <td>Two robotic life buoys deployed on River Shann...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1470857919805595650</td>\n",
       "      <td>2021-12-14 20:47:09+00:00</td>\n",
       "      <td>https://t.co/2tfrBwhwOc update: New mobile exp...</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1470857902902579206</td>\n",
       "      <td>2021-12-14 20:47:05+00:00</td>\n",
       "      <td>#NetworksProtocols #Cypherium Cypherium launch...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1470857895537303553</td>\n",
       "      <td>2021-12-14 20:47:04+00:00</td>\n",
       "      <td>Senior Communications Specialist - Corporate C...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1470857889778585601</td>\n",
       "      <td>2021-12-14 20:47:02+00:00</td>\n",
       "      <td>Manager, Counterparty Contracts (Calgary, AB, ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1470857723348590597</td>\n",
       "      <td>2021-12-14 20:46:23+00:00</td>\n",
       "      <td>The Loss Function of Intelligence https://t.co...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1470857391532953602</td>\n",
       "      <td>2021-12-14 20:45:04+00:00</td>\n",
       "      <td>The best books to learn #Software development ...</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1470856913978077196</td>\n",
       "      <td>2021-12-14 20:43:10+00:00</td>\n",
       "      <td>RT @l_stone: Sources tell @globeandmail that P...</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1470856006749986817</td>\n",
       "      <td>2021-12-14 20:39:33+00:00</td>\n",
       "      <td>#AANews #CryptoNews #social #Metaverse #NonFun...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1470855655577858051</td>\n",
       "      <td>2021-12-14 20:38:10+00:00</td>\n",
       "      <td>Will #artificialintelligence achieve ‚Äúgodlike‚Äù...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1470855636594216960</td>\n",
       "      <td>2021-12-14 20:38:05+00:00</td>\n",
       "      <td>#Bitcoin #BitcoinCommunity #BitcoinWallet #Bit...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1470855632123092992</td>\n",
       "      <td>2021-12-14 20:38:04+00:00</td>\n",
       "      <td>Chrystia Freeland to deliver fiscal update vir...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Id                Created At  \\\n",
       "0   1470861456321224718 2021-12-14 21:01:13+00:00   \n",
       "1   1470861325341442059 2021-12-14 21:00:41+00:00   \n",
       "2   1470861246232731655 2021-12-14 21:00:23+00:00   \n",
       "3   1470861211227070474 2021-12-14 21:00:14+00:00   \n",
       "4   1470860530961240071 2021-12-14 20:57:32+00:00   \n",
       "5   1470860034447978496 2021-12-14 20:55:34+00:00   \n",
       "6   1470859927539392514 2021-12-14 20:55:08+00:00   \n",
       "7   1470858398845607949 2021-12-14 20:49:04+00:00   \n",
       "8   1470858155039105024 2021-12-14 20:48:06+00:00   \n",
       "9   1470857919805595650 2021-12-14 20:47:09+00:00   \n",
       "10  1470857902902579206 2021-12-14 20:47:05+00:00   \n",
       "11  1470857895537303553 2021-12-14 20:47:04+00:00   \n",
       "12  1470857889778585601 2021-12-14 20:47:02+00:00   \n",
       "13  1470857723348590597 2021-12-14 20:46:23+00:00   \n",
       "14  1470857391532953602 2021-12-14 20:45:04+00:00   \n",
       "15  1470856913978077196 2021-12-14 20:43:10+00:00   \n",
       "16  1470856006749986817 2021-12-14 20:39:33+00:00   \n",
       "17  1470855655577858051 2021-12-14 20:38:10+00:00   \n",
       "18  1470855636594216960 2021-12-14 20:38:05+00:00   \n",
       "19  1470855632123092992 2021-12-14 20:38:04+00:00   \n",
       "\n",
       "                                               Tweets  Retweet Count  \n",
       "0   Interactive Data Visualization with plotly in ...              0  \n",
       "1   #PoT | #FBO | Check this out! We have just dow...              0  \n",
       "2   RT @Ronald_vanLoon: Enterprise #DigitalTransfo...             28  \n",
       "3   Access world-class instructors and mentors thr...              0  \n",
       "4   Learn all about #Cloud #Data #DataScience at '...              1  \n",
       "5   RT @GinniRometty: I'm proud to be co-chair of ...             13  \n",
       "6   if you haven't let them know today üíñ https://t...              0  \n",
       "7   Scientists Use A New #DeepLearning Method To A...              2  \n",
       "8   Two robotic life buoys deployed on River Shann...              0  \n",
       "9   https://t.co/2tfrBwhwOc update: New mobile exp...              2  \n",
       "10  #NetworksProtocols #Cypherium Cypherium launch...              0  \n",
       "11  Senior Communications Specialist - Corporate C...              0  \n",
       "12  Manager, Counterparty Contracts (Calgary, AB, ...              0  \n",
       "13  The Loss Function of Intelligence https://t.co...              0  \n",
       "14  The best books to learn #Software development ...             17  \n",
       "15  RT @l_stone: Sources tell @globeandmail that P...             31  \n",
       "16  #AANews #CryptoNews #social #Metaverse #NonFun...              0  \n",
       "17  Will #artificialintelligence achieve ‚Äúgodlike‚Äù...              1  \n",
       "18  #Bitcoin #BitcoinCommunity #BitcoinWallet #Bit...              0  \n",
       "19  Chrystia Freeland to deliver fiscal update vir...              1  "
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "consumer_key = 'asuwyvnaJLR1iIPbUUMinGTSf'\n",
    "consumer_secret = 'cSNVg8wqP0Kyydh9uCQvigVfh4Au5oIUIEPNJaEcF2kX4IK6vN'\n",
    "access_token = '717153459380871168-VsHmhliqLzYJMHAyVEM4nbgjYz7UnnE'\n",
    "access_token_secret = 'USI0JQgiyYS8Apu2z2kQBqxd3lcGC47EpJ8cecBOTkWes'\n",
    "\n",
    "auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n",
    "auth.set_access_token(access_token, access_token_secret)\n",
    "\n",
    "api = tweepy.API(auth)\n",
    "\n",
    "public_tweets = api.home_timeline()\n",
    "\n",
    "_id = [tweet.id for tweet in public_tweets]\n",
    "created_at = [tweet.created_at for tweet in public_tweets]\n",
    "tweets = [tweet.text for tweet in public_tweets]\n",
    "retweet_count = [tweet.retweet_count for tweet in public_tweets]\n",
    "\n",
    "TweetsData = pd.DataFrame({'Id':_id,'Created At':created_at,'Tweets':tweets,'Retweet Count':retweet_count})\n",
    "\n",
    "TweetsData\n",
    "    \n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime\n",
    "import csv\n",
    "\n",
    "consumer_key = 'asuwyvnaJLR1iIPbUUMinGTSf'\n",
    "consumer_secret = 'cSNVg8wqP0Kyydh9uCQvigVfh4Au5oIUIEPNJaEcF2kX4IK6vN'\n",
    "access_token = '717153459380871168-VsHmhliqLzYJMHAyVEM4nbgjYz7UnnE'\n",
    "access_token_secret = 'USI0JQgiyYS8Apu2z2kQBqxd3lcGC47EpJ8cecBOTkWes'\n",
    "\n",
    "auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n",
    "auth.set_access_token(access_token, access_token_secret)\n",
    "\n",
    "api = tweepy.API(auth)\n",
    "\n",
    "filename = 'twitter_data_analysis'+(datetime.datetime.now().strftime(\"%Y-%m-%d-%H\"))+'.csv'\n",
    "with open (filename, 'a+', newline='', encoding='utf-8') as csvFile:\n",
    "    csvWriter = csv.writer(csvFile)\n",
    "\n",
    "#using tweepy Cursor\n",
    "    for tweet in tweepy.Cursor(api.search_tweets, q='bitcoin', lang = 'en', count=1).items():\n",
    "\n",
    "#writing a csv file\n",
    "        tweets_encoded = tweet.text.encode('utf-8')    \n",
    "        tweets_decoded = tweets_encoded.decode('utf-8')\n",
    "#        print(tweet.text)\n",
    "        csvWriter.writerow([datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M\"), tweet.id, tweets_decoded, tweet.created_at, tweet.geo, tweet.place.name if tweet.place else None, tweet.coordinates, tweet._json[\"user\"][\"location\"]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>id</th>\n",
       "      <th>tweets</th>\n",
       "      <th>created_at</th>\n",
       "      <th>geo</th>\n",
       "      <th>place</th>\n",
       "      <th>coordinates</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-12-14 20:04</td>\n",
       "      <td>1470922586695606272</td>\n",
       "      <td>@KfardyArtist I never thought of meeting a leg...</td>\n",
       "      <td>2021-12-15 01:04:07+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-12-14 20:04</td>\n",
       "      <td>1470922582408917000</td>\n",
       "      <td>Only 10% of the Bitcoin supply left to mine - ...</td>\n",
       "      <td>2021-12-15 01:04:06+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>France</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-12-14 20:04</td>\n",
       "      <td>1470922582346055683</td>\n",
       "      <td>RT @BitcoinSapiens: ‚ÄúYou weren‚Äôt asked for per...</td>\n",
       "      <td>2021-12-15 01:04:06+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               time                   id  \\\n",
       "0  2021-12-14 20:04  1470922586695606272   \n",
       "1  2021-12-14 20:04  1470922582408917000   \n",
       "2  2021-12-14 20:04  1470922582346055683   \n",
       "\n",
       "                                              tweets  \\\n",
       "0  @KfardyArtist I never thought of meeting a leg...   \n",
       "1  Only 10% of the Bitcoin supply left to mine - ...   \n",
       "2  RT @BitcoinSapiens: ‚ÄúYou weren‚Äôt asked for per...   \n",
       "\n",
       "                  created_at  geo  place  coordinates        country  \n",
       "0  2021-12-15 01:04:07+00:00  NaN    NaN          NaN  United States  \n",
       "1  2021-12-15 01:04:06+00:00  NaN    NaN          NaN         France  \n",
       "2  2021-12-15 01:04:06+00:00  NaN    NaN          NaN            NaN  "
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "col_names = ['time','id','tweets','created_at', 'geo', 'place', 'coordinates','country']\n",
    "pd.read_csv('twitter_data_analysis2021-12-14-20.csv', header=None, names = col_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Twitter streaming...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Stream encountered HTTP error: 420\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-86-fe4560a95129>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     62\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m             \u001b[0;31m# search twitter for the keyword\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m             \u001b[0mlistener\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrack\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'omicron'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlanguages\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'en'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstall_warnings\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/tweepy/streaming.py\u001b[0m in \u001b[0;36mfilter\u001b[0;34m(self, follow, track, locations, filter_level, languages, stall_warnings, threaded)\u001b[0m\n\u001b[1;32m    268\u001b[0m                                           body=body)\n\u001b[1;32m    269\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 270\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_connect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mendpoint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheaders\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mheaders\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbody\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    271\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    272\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlanguages\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstall_warnings\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mthreaded\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/tweepy/streaming.py\u001b[0m in \u001b[0;36m_connect\u001b[0;34m(self, method, endpoint, params, headers, body)\u001b[0m\n\u001b[1;32m    150\u001b[0m                                     \u001b[0mhttp_error_wait\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhttp_420_error_wait_start\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 152\u001b[0;31m                             \u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhttp_error_wait\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    153\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    154\u001b[0m                             \u001b[0mhttp_error_wait\u001b[0m \u001b[0;34m*=\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "from tweepy import Stream\n",
    "import json\n",
    "import boto3\n",
    "import time\n",
    "\n",
    "\n",
    "class TweetStreamListener(Stream):\n",
    "    # on success\n",
    "    def on_data(self, data):\n",
    "        tweet = json.loads(data)\n",
    "        try:\n",
    "            if 'text' in tweet.keys():\n",
    "                message_lst = [str(tweet['id']),\n",
    "                       str(tweet['user']['name']),\n",
    "                       str(tweet['user']['screen_name']),\n",
    "                       tweet['text'].replace('\\n',' ').replace('\\r',' '),\n",
    "                       str(tweet['user']['followers_count']),\n",
    "                       str(tweet['user']['location']),\n",
    "                       str(tweet['geo']),\n",
    "                       str(tweet['created_at']),\n",
    "                       '\\n'\n",
    "                       ]\n",
    "                message = '\\t'.join(message_lst)\n",
    "                print(message)\n",
    "                firehose_client.put_record(\n",
    "                    DeliveryStreamName=delivery_stream_name,\n",
    "                    Record={\n",
    "                        'Data': message\n",
    "                    }\n",
    "                )\n",
    "        except (AttributeError, Exception) as e:\n",
    "            print(e)\n",
    "        return True\n",
    "\n",
    "    def on_error(self, status):\n",
    "        print (status)\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    # create kinesis client connection\n",
    "    session = boto3.Session()\n",
    "    firehose_client = session.client('firehose', region_name='us-east-2')\n",
    "\n",
    "    # Set kinesis data stream name\n",
    "    delivery_stream_name = 'twitter'\n",
    "\n",
    "    # Set twitter credentials\n",
    "    consumer_key = 'asuwyvnaJLR1iIPbUUMinGTSf'\n",
    "    consumer_secret = 'cSNVg8wqP0Kyydh9uCQvigVfh4Au5oIUIEPNJaEcF2kX4IK6vN'\n",
    "    access_token = '717153459380871168-VsHmhliqLzYJMHAyVEM4nbgjYz7UnnE'\n",
    "    access_token_secret = 'USI0JQgiyYS8Apu2z2kQBqxd3lcGC47EpJ8cecBOTkWes'\n",
    "\n",
    "    while True:\n",
    "        try:\n",
    "            print('Twitter streaming...')\n",
    "\n",
    "            # create instance of the tweet stream listener\n",
    "            listener = TweetStreamListener(consumer_key, \n",
    "                               consumer_secret, \n",
    "                               access_token, \n",
    "                               access_token_secret)\n",
    "\n",
    "            # search twitter for the keyword\n",
    "            listener.filter(track=['omicron'], languages=['en'], stall_warnings=True)\n",
    "        except Exception as e:\n",
    "            print(e)\n",
    "            print('Disconnected...')\n",
    "            time.sleep(5)\n",
    "            continue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
